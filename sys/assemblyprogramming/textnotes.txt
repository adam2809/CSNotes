>>Instructions vary in size from CPU to CPU in ARM ISA it's 16-bit
in x86 it's from 11-bit to 16-bit but you can't tell until decoding.

>>No variables use register instead. On ARM its fixed chunks of memory. Some registers are specialized
(PC which contains the address of current location(R15 register on ARM)). ARM has 31 32-bit registers and a status register CPSR.

>>CPU work cycle:
-Fetch
-Decode
-Execute(may involve accessing memory again)

>>Assembly language(aasm used in the course):
-Somewhat readable is later converted directly to machine code
-Fixed syntax. You can't for example decide how indentation looks as assemblers are
significantly less complicated than compilers

>>Insteructions
-ADR register adress(label);puts adress(labeled) in register
-R0 is a register used for printing
-SWI/SVC24-bit number;executes os commands(eg printing);used to communicate with the os
-CMP compares two values(internally takes value from one registers and subtracts the other one)
BEQ(branch if equal) and BNE(branch if not equal)
-ADR reg, label;take a value from a label(or adress) and put int in reg
-STR reg, label;take a value from reg and put int in label(or adress)
-MUL reg0, reg1, reg2; can ONLY multiply registers;reg1*reg2 stored in reg0
-MLA reg0, reg1, reg2, reg3;can ONLY multiply registers;(reg1*reg2)+reg3 stored in reg0

>>SWI
-1;user input
-2;stop the program
-3;prints value in R0
-4;prints value in adress pointed to by R0
